name: CI

on:
  workflow_dispatch:
    branches:
      - '*'
  push:
    branches:
      - master
      - '*_maintenance'
      - '*_msvc*'
  pull_request:
    branches:
      - '*'
  release:
      types: [published]

jobs:

  build:

    strategy:

      # Don't cancel other jobs in the build matrix if one job fails.
      fail-fast: false

      matrix:

        # Rather than generate all permutations of various settings,
        # we want to explicitly list each of the variants we want to
        # test. We can use `name` to declare the names of our variants,
        # and then use `include` to define their settings.

        name: [
          # linux,
          # linux-debug,
          # linux-python3,
          # macos,
          # windows-python2,
          windows-python3,
        ]

        include:

         # - name: linux
         #   os: ubuntu-16.04
         #   buildType: RELEASE
         #   variant: linux-python2
         #   publish: true
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-linux.tar.gz
         #    # GitHub container builds run as root. This causes failures for tests that
         #    # assert that filesystem permissions are respected, because root doesn't
         #    # respect permissions. So we run the final test suite as a dedicated
         #    # test user rather than as root.
         #   testRunner: su testUser -c
         #   sconsCacheMegabytes: 400
         #
         # - name: linux-debug
         #   os: ubuntu-16.04
         #   buildType: DEBUG
         #   variant: linux-python2
         #   publish: false
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-linux.tar.gz
         #   testRunner: su testUser -c
         #    # Debug builds are ludicrously big, so we must use a larger cache
         #    # limit. In practice this compresses down to 4-500Mb.
         #   sconsCacheMegabytes: 2500
         #
         # - name: linux-python3
         #   os: ubuntu-16.04
         #   buildType: RELEASE
         #   variant: linux-python3
         #   publish: true
         #   containerImage: gafferhq/build:1.2.0
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python3-linux.tar.gz
         #   testRunner: su testUser -c
         #   sconsCacheMegabytes: 400
         #
         # - name: macos
         #   os: macos-10.15
         #   buildType: RELEASE
         #   variant: macos-python2
         #   publish: true
         #   containerImage:
         #   dependenciesURL: https://github.com/GafferHQ/dependencies/releases/download/2.3.0/gafferDependencies-2.3.0-Python2-osx.tar.gz
         #   testRunner: bash -c
         #   sconsCacheMegabytes: 400

         - name: windows-python3
           os: windows-2016
           buildType: RELEASE
           variant: windows-python3
           python-version: '3.x'
           publish: true
           containerImage:
           testRunner: cmd
           sconsCacheMegabytes: 400

    runs-on: ${{ matrix.os }}

    container: ${{ matrix.containerImage }}

    env:
      DISPLAY: ":99.0"
      ARNOLD_LICENSE_ORDER: none # Don't waste time looking for a license that doesn't exist
      GAFFER_BUILD_DIR: "./build"
      GAFFER_CACHE_DIR: "./sconsCache"
      GAFFER_BUILD_VARIANT: ${{ matrix.variant }}

    steps:

    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1 # for windows - does nothing on Linux/osx
      # with:
      #   toolset: "9"


    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
      if: runner.os == 'Windows'


    - name: Install toolchain (MacOS)
      # Prefer `pip install` where possible because it is faster
      # than `brew install`.
      run: |
        pip install scons==3.1.2
        # Ensure scons is on PATH, at some point it vanished, maybe as part of GH Py 2-3 migration?
        echo `pip show scons | grep "Location:" | cut -d ' ' -f2`/../../../bin >> $GITHUB_PATH
        pip install sphinx==1.8.1 sphinx_rtd_theme==0.4.3 recommonmark==0.5.0 docutils==0.12
        # Force inkscape < 1.0 until SConstruct is updated
        brew install --cask xquartz &&
        brew install --cask ./config/brew/Casks/inkscape.rb
      if: runner.os == 'macOS'

    - name: Install toolchain (Linux)
      run: |
        echo /opt/rh/devtoolset-6/root/bin >> $GITHUB_PATH
        Xvfb :99 -screen 0 1280x1024x24 &
        metacity&
        useradd -m testUser
      if: runner.os == 'Linux'

    - name: Install toolchain (Windows)
      shell: bash
      run: |
        python --version
        pip install SCons
        pip install sphinx
        pip install pywin32
        scons --version
        mkdir -p $GAFFER_BUILD_DIR/bin
        CD=$(readlink -f $(pwd))
        cd $GAFFER_BUILD_DIR/bin
        export PATH=$(pwd):$PATH
        echo PATH=$(pwd):$PATH >> $GITHUB_ENV
        curl -L -O http://download.qt.io/official_releases/jom/jom.zip ; unzip jom.zip
        curl -L https://sourceforge.net/projects/winflexbison/files/win_flex_bison-2.5.24.zip/download > win_flex_bison_2.5.24.zip
        unzip win_flex_bison_2.5.24.zip
        mv win_flex.exe flex.exe
        mv win_bison.exe bison.exe
        cd $CD

        # curl -L -O https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
        # chmod +x ./apt-cyg
        # ./apt-cyg mirror http://mirrors.sohu.com/cygwin/
        # curl -L -O https://cygwin.com/setup-x86_64.exe ; ./setup-x86_64.exe  -q -P bison
        # nasm --version || true

        # patch python config.py to only build the python version we want
        python_version=$(echo $GAFFER_BUILD_VARIANT | awk -F'python' '{print $(NF)}')
        sed -i.bak -e "s/variants.......2....3...,/variants\" : [ \"$python_version\" ],/" ./Python/config.py

        # we remove /usr/bin/link so it doesn't interfere with MSVC link
        rm /usr/bin/link
      if: runner.os == 'Windows'



    # - name: 'Install Python Modules'
    #   shell: bash
    #   run: |
    #     python --version
    #     pip install PyJWT==1.7.1 PyGitHub==1.45
    #
    #
    # - name: Disable macOS PR Docs
    #   run: |
    #     echo GAFFER_SPHINX=doesNotExist >> $GITHUB_ENV
    #     echo GAFFER_VALIDATE_EXTRA_FLAGS=--skipDocs >> $GITHUB_ENV
    #   if: runner.os == 'macOS' && env.GAFFER_GITHUB_RELEASEID == ''
    #
    # - name: Install dependencies
    #   # The `$GITHUB_ENV` shenanigans creates an environment variable
    #   # containing the hash of the archive, for use in the cache key
    #   # below.
    #   shell: bash
    #   run: |
    #     echo GAFFER_DEPENDENCIES_HASH=`python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
    #     ./config/installArnold.sh
    #     ./config/installDelight.sh
    #     echo ARNOLD_ROOT=$GITHUB_WORKSPACE/arnoldRoot >> $GITHUB_ENV
    #     echo DELIGHT=$GITHUB_WORKSPACE/3delight >> $GITHUB_ENV
    #   if: runner.os != 'Windows'
    #
    # - name: Install dependencies (Windows)
    #   # The `$GITHUB_ENV` shenanigans creates an environment variable
    #   # containing the hash of the archive, for use in the cache key
    #   # below.
    #   shell: bash
    #   run: |
    #     #python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"
    #     echo GAFFER_DEPENDENCIES_HASH=`python .github/workflows/main/installDependencies.py --archiveURL ${{ matrix.dependenciesURL }} --dependenciesDir ${{ env.GAFFER_BUILD_DIR }} --outputFormat "{archiveDigest}"` >> $GITHUB_ENV
    #     ls -l ./build/
    #     #./config/installArnold.sh
    #     #./config/installDelight.sh
    #     echo ARNOLD_ROOT=$GITHUB_WORKSPACE\\arnoldRoot >> $GITHUB_ENV
    #     echo DELIGHT=$GITHUB_WORKSPACE\\3delight >> $GITHUB_ENV
    #     # in case boost is in a versioned folder, move it to include so scons can find it!
    #     [ "$(ls -d ./build/include/boost-*)" != "" ] && mv ./build/include/boost-*/* ./build/include/
    #   if: runner.os == 'Windows'
    #
    - name: Cache
      uses: actions/cache@v1
      with:
        path: ${{ env.GAFFER_CACHE_DIR }}
        key: ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.containerImage }}-${{env.GAFFER_DEPENDENCIES_HASH}}-${{ matrix.buildType }}-

    - name: Build Gaffer Dependencies
      shell: bash
      run: |
        (./build.py 2>&1 > build.log ) || ( tail -n 200 ./build.log ; grep ' error' ./build.log ; exit -1 )

    # - name: Test
    #   run: |
    #     echo "::add-matcher::./.github/workflows/main/problemMatchers/unittest.json"
    #     ${{ matrix.testRunner }} "${{ env.GAFFER_BUILD_DIR }}/bin/gaffer test"
    #     echo "::remove-matcher owner=unittest::"
    #
    # - name: Build Docs and Package
    #   # We currently experience sporadic hangs in the docs builds (mac), this
    #   # aborts them in a more timely fashion than the default 6hr timeout.
    #   timeout-minutes: 20
    #   run: |
    #     # Treats warnings-as-errors so we know about broken links
    #     echo "::add-matcher::./.github/workflows/main/problemMatchers/sphinx.json"
    #     scons -j 2 package BUILD_TYPE=${{ matrix.buildType }} OPTIONS=.github/workflows/main/sconsOptions
    #     echo "::remove-matcher owner=sphinx::"
    #   if: matrix.publish
    #
    # - name: Validate
    #   run: |
    #     echo "::add-matcher::./.github/workflows/main/problemMatchers/validateRelease.json"
    #     ./config/validateRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.tar.gz ${{ env.GAFFER_VALIDATE_EXTRA_FLAGS }}
    #     echo "::remove-matcher owner=validateRelease::"
    #   if: matrix.publish
    #
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{ env.GAFFER_BUILD_NAME }}
    #     path: ${{ env.GAFFER_BUILD_NAME }}.tar.gz
    #   if: matrix.publish && env.GAFFER_GITHUB_RELEASEID == ''
    #
    # - name: Publish Release
    #   run: |
    #     ./config/publishRelease.py --archive ${{ env.GAFFER_BUILD_NAME }}.tar.gz --repo ${{ github.repository }} --releaseId ${{ env.GAFFER_GITHUB_RELEASEID }}
    #   if: matrix.publish && env.GAFFER_GITHUB_RELEASEID != ''
    #   env:
    #     GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Limit cache size
      # GitHub has a limit of 5G for all caches in a repository. Because we write new
      # files into `./sconsCache` with every build, we must trim its size to avoid
      # unbounded growth. In practice, the archives that get uploaded are much smaller
      # than the limit we apply here, because they're compressed.
      run: ./.github/workflows/main/limitDirectorySize.py --directory ./sconsCache --megabytes ${{ matrix.sconsCacheMegabytes }} --verbose

    # DEBUG: connect to the action node using tmate for debugging
    # NOTE: when opening the tmate link, press 'q' to go to the shell!
    - name: Setup tmate session for debug if error (15 minutes timeout)
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      # timeout-minutes: 15
